#!/bin/bash
# v0.2.r3
un_dir="/usr/share/udev-notify"
icon_dir="$un_dir/icons"
sounds_dir="$un_dir/sounds"
devlist_file="/var/tmp/udev-notify-devices"
lock_file="/var/lock/.udev-notify-devices.lock" # don't use /tmp, it's not available in early boot
plug_sound_path="$sounds_dir/plug_sound.wav"
unplug_sound_path="$sounds_dir/unplug_sound.wav"
config_file="/etc/udev-notify.conf"
ignored_devices_file="/etc/udev-notify-ignored.devices"

show_notifications="true"
notification_icons="true"
play_sounds="true"
use_espeak="false"

if [ -f "$config_file" ]
   then
       source "$config_file"
fi

while getopts a:p:b:d: opt
   do
      case "$opt" in
         a) action=$OPTARG ;;
         p) dev_path=$OPTARG ;;
         b) bus_num=$OPTARG ;;
         d) dev_num=$OPTARG ;;
      esac
done
shift $((OPTIND - 1))

get_device_icon() {
   local dev_data="$(echo "$1"|sed 's/###/\n/g'|grep -e '>Class' -A 2 -m 1|cut -d' ' -f2-|tr -s ' ' '_')"
   IFS=$'\n' local dev_array=($dev_data)
   local class="${dev_array[0]}"
   local subclass="${dev_array[1]}"
   local protocol="${dev_array[2]}"
   case "$class:$subclass:$protocol" in
      Audio:* )
         dev_icon="$icon_dir/audio-card.svg"
      ;;
      Communications:Abstract* )
         dev_icon="$icon_dir/network-modem.svg"
      ;;
      Communications:Ethernet* )
         dev_icon="$icon_dir/network-wired.svg"
      ;;
      Human_Interface_Device:*:Keyboard )
         dev_icon="$icon_dir/input-keyboard.svg"
      ;;
      Human_Interface_Device:*:Mouse )
         dev_icon="$icon_dir/input-mouse.svg"
      ;;
      Mass_Storage:RBC:* )
         dev_icon="$icon_dir/drive-removable-media.svg"
      ;;
      Mass_Storage:Floppy:* )
         dev_icon="$icon_dir/media-floppy.svg"
      ;;
      Mass_Storage:SCSI:* )
         dev_icon="$icon_dir/drive-removable-media.svg"
      ;;
      Printer:* )
         dev_icon="$icon_dir/printer.svg"
      ;;
      Hub:* )
         dev_icon="$icon_dir/emblem-shared.svg"
      ;;
      Video:* )
         dev_icon="$icon_dir/camera-web.svg"
      ;;
      Xbox:Controller:* )
         dev_icon="$icon_dir/input-gaming.svg"
      ;;
      Wireless:Radio_Frequency:Bluetooth )
         dev_icon="$icon_dir/network-bluetooth.svg"
      ;;
      Wireless:Radio_Frequency:RNDIS )
         dev_icon="$icon_dir/network-wired.svg"
      ;;
      *) dev_icon="$icon_dir/drive-removable-media.svg" ;;
   esac
}

show_visual_notification() {
   local title="$1"
   local header="$2"
   local text="$3"
   if [ "$notification_icons" == "true" ]
      then
          get_device_icon "$2"
      else
          dev_icon=""
   fi

   header="$(echo "$header"|sed 's/###/\n/g')"
   text="$(echo "$text"|sed 's/###/\n/g')"

   declare -a logged_users=($(print_logged_users))
   for (( i=0; i<${#logged_users[@]}; i=($i + 1) ))
      do
         cur_user="${logged_users[$i]}"
         cur_user_id="$(id -u "$cur_user")"
         export XDG_RUNTIME_DIR="/run/user/$cur_user_id"
         export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$cur_user_id/bus"
         export DISPLAY="$(who|grep "$cur_user"|grep 'tty' -m1|grep -o '(.*)$'|sed 's/(//;s/)//')"
         export XAUTHORITY="/home/$cur_user/.Xauthority"
         su "$cur_user" -c "notify-send -i '$dev_icon' -a '$title' '$header' '$text'"
   done
}

print_logged_users() {
   who|grep "(.*)"|sed 's/^\s*\(\S\+\).*/\1/g'|uniq|sort
}

sound_or_speak() {
   local soundfile="$1"
   local speaktext="$2"
   declare -a logged_users=($(print_logged_users))
   for (( i=0; i<${#logged_users[@]}; i=($i + 1) ))
      do
         cur_user="${logged_users[$i]}"
         if [ "$use_espeak" == "true" ]
            then
                if [[ -f "/bin/espeak" && "$speaktext" != "" ]]
                   then
                       su "$cur_user" -c "/bin/espeak '$speaktext'"
                fi
            else
                if [[ -f "/bin/play" && -f "$soundfile" ]]
                   then
                       su "$cur_user" -c "/bin/play -q '$soundfile'"
                fi
         fi
   done
}

notify_plugged() {
   local dev_name="$1"
   local iProduct="$2"
   local dev_verbose="$3"
   if [ "$show_notifications" == "true" ]
      then
          show_visual_notification "$iProduct plugged in" "$dev_name" "$dev_verbose"
   fi

   if [ "$play_sounds" == "true" ]
      then
          sound_or_speak "$plug_sound_path" "Device plugged: $dev_name"
   fi
}

notify_unplugged() {
   local dev_name="$1"
   local iProduct="$2"
   local dev_verbose="$3"
   if [ "$show_notifications" == "true" ]
      then
          show_visual_notification "$iProduct unplugged" "$dev_name" "$dev_verbose"
   fi

   if [ "$play_sounds" == "true" ]
      then
          sound_or_speak "$unplug_sound_path" "Device unplugged: $dev_name"
   fi
}

sanitize_dev_name() {
    # Remove redundant strings
    local dev_name="$1"
    echo $dev_name | sed \
        -e "s/ America, / /g" \
        -e "s/ Co, / /g" \
        -e "s/ CO., / /g" \
        -e "s/ Co.Ltd / /g" \
        -e "s/ Comm. / /g" \
        -e "s/ Communication / /g" \
        -e "s/ Computer, / /g" \
        -e "s/ Computers, / /g" \
        -e "s/ ELECTRIC / /g" \
        -e "s/ Electronic, / /g" \
        -e "s/ Electronics.Co.,Ltd / /g" \
        -e "s/ GmbH / /g" \
        -e "s/ Holdings, / /g" \
        -e "s/ Industrial, / /g" \
        -e "s/ Industry / /g" \
        -e "s/ Multimedia, / /g" \
        -e "s/ Pty, / /g" \
        -e "s/ Pty., / /g" \
        -e "s/ Silicon / /g" \
        -e "s/ Tech, / /g" \
        -e "s/ Tech. / /g" \
        -e "s/ Technic / /g" \
        -e "s/ Technics / /g" \
        -e "s/ Techno / /g" \
        -e "s/ Telecommunications / /g" \
        -e "s/ Telecommunications, / /g" \
        -e "s/ Telecomunicacoes / /g" \
        -e "s/ Teletech / /g" \
        -e "s/ Co. / /g" \
        -e "s/ Devices / /g" \
        -e "s/ Enterprises / /g" \
        -e "s/ Group, / /g" \
        -e "s/ Industries / /g" \
        -e "s/ Industries, / /g" \
        -e "s/ International, / /g" \
        -e "s/ Manufacturing / /g" \
        -e "s/ Networks, / /g" \
        -e "s/ USA, / /g" \
        -e "s/ Company / /g" \
        -e "s/ Corp., / /g" \
        -e "s/ Digital / /g" \
        -e "s/ System / /g" \
        -e "s/ Systems / /g" \
        -e "s/ Systems, / /g" \
        -e "s/ International / /g" \
        -e "s/ Ltd, / /g" \
        -e "s/ Technology, / /g" \
        -e "s/ Computer / /g" \
        -e "s/ Tech / /g" \
        -e "s/ Enterprise / /g" \
        -e "s/ Information / /g" \
        -e "s/ Technologies / /g" \
        -e "s/ Technologies, / /g" \
        -e "s/ Semiconductor / /g" \
        -e "s/ Electronics, / /g" \
        -e "s/ Electronic / /g" \
        -e "s/ Industrial / /g" \
        -e "s/ Electric / /g" \
        -e "s/ Ltd. / /g" \
        -e "s/ Ltd / /g" \
        -e "s/ Electronics / /g" \
        -e "s/ Technology / /g" \
        -e "s/ Co., / /g" \
        -e "s/ Inc., / /g" \
        -e "s/ Inc. / /g" \
        -e "s/ Inc / /g" \
        -e "s/ Corporation / /g" \
        -e "s/ Corp., / /g" \
        -e "s/ Corp. / /g" \
    | tr -s ' '
}

(
   flock -w 10 200||exit 1
   case "$action" in
      add )
         if [[ "$bus_num" != "" && "$dev_num" != "" ]]
            then
                bus_num="$(printf %03d $bus_num)"
                dev_num="$(printf %03d $dev_num)"
                dev_info="$(lsusb -D "/dev/bus/usb/$bus_num/$dev_num")"
                dev_name="$(echo "$dev_info"|grep -m1 '^Device:'|cut -d' ' -f4-)"
                dev_name="$(sanitize_dev_name "$dev_name")"
                vp_id="$(echo "$dev_info"|grep -m1 '^Device:'|awk '{print$3}')"

                usb_type="USB $(echo "$dev_info" | grep bcdUSB | head -n1 | awk '{print $2}' | cut -c-3)"

                speed="$(lsusb -tvv | tac | grep -A10 "/dev/bus/usb/$bus_num/$dev_num" | grep -E '[0-9]+M' | head -n1 | tr ' ' '\n' | grep -E '[0-9]+M')"
                if [ ! -z "$speed" ]; then usb_type="$usb_type ($(echo $speed | sed s/000M/G/g)bps)"; fi

                dev_verbose="$(echo "<b>Link type:</b> $usb_type###<b>Vendor / Product ID:</b> $vp_id###$(echo "$dev_info"|\
                             sed 's/^ *//'|sed '/^[[:space:]]*$/d'|sed 's/[[:blank:]]*$//'|awk '!($2="")'|\
                             grep -m3 'bInterfaceClass\|bInterfaceSubClass\|bInterfaceProtocol'|awk '!seen[$0]++'|\
                             grep -v '^bInterfaceClass $'|grep -v '^bInterfaceSubClass $'|grep -v '^bInterfaceProtocol $'|\
                             grep -v 'Vendor Specific'|sed 's/bInterface//g'|sed 's/^\s*\([a-zA-Z]\+\):*\s*[0-9]*\s*/<b>\1:<\/b> /'|\
                             awk 1 ORS='###')<b>Bus</b> '$bus_num' <b>Device</b> '$dev_num'")"


                iProduct="$(echo "$dev_info" | grep -m1 iProduct | tr -s ' ' | cut -d' ' -f4-)"

                escaped_dev_path="$(echo "$dev_path"|sed 's/[\/&*.^$]/\\\&/g')"
                sed -i "s#^\([0-9]\{3\}:\)\{2\}\($escaped_dev_path\)#$bus_num:$dev_num:$dev_path#" "$devlist_file"

                existing_dev_on_bus_cnt="$(cat "$devlist_file" | grep "^$bus_num:$dev_num:" | awk 'END {print NR}')"
                ignored_device="$(cat "$ignored_devices_file" | grep "$vp_id" | awk 'END {print NR}')"

                if [[ "$existing_dev_on_bus_cnt" == "0" && "$ignored_device" == "0" ]]; then
                    echo "$bus_num:$dev_num:$dev_path name=\"$dev_name\"" >> "$devlist_file"
                    echo "$bus_num:$dev_num:$dev_path iProduct=\"$iProduct\"" >> "$devlist_file"
                    echo "$bus_num:$dev_num:$dev_path verbose=\"$dev_verbose\"" >> "$devlist_file"
                    notify_plugged "$dev_name" "$iProduct" "$dev_verbose"
                fi
         fi
         ;;
      remove )
         dev_name="$(grep "$dev_path " "$devlist_file"    | grep 'name="'     | sed 's/.*name=\"\(.*\)\".*/\1/g'     |tail -1)"
         iProduct="$(grep "$dev_path " "$devlist_file"    | grep 'iProduct="' | sed 's/.*iProduct=\"\(.*\)\".*/\1/g' |tail -1)"
         dev_verbose="$(grep "$dev_path " "$devlist_file" | grep 'verbose="'  | sed 's/.*verbose=\"\(.*\)\".*/\1/g'  |tail -1)"
         grep -v "$dev_path " "$devlist_file" > "$devlist_file"_tmp
         mv "$devlist_file"_tmp "$devlist_file"
         if [ "$dev_name" != "" ]; then
            notify_unplugged "$dev_name" "$iProduct" "$dev_verbose"
         fi
         ;;
   esac
) 200>"$lock_file"
